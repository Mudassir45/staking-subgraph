// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CampaginAdded extends ethereum.Event {
  get params(): CampaginAdded__Params {
    return new CampaginAdded__Params(this);
  }
}

export class CampaginAdded__Params {
  _event: CampaginAdded;

  constructor(event: CampaginAdded) {
    this._event = event;
  }

  get startingTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endingTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get initialTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get campaignTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokensClaimed extends ethereum.Event {
  get params(): TokensClaimed__Params {
    return new TokensClaimed__Params(this);
  }
}

export class TokensClaimed__Params {
  _event: TokensClaimed;

  constructor(event: TokensClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get initialTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endingTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Contract__campaignListResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  unstakeQuery(amount: BigInt): BigInt {
    let result = super.call("unstakeQuery", "unstakeQuery(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_unstakeQuery(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeQuery",
      "unstakeQuery(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  campaignList(param0: BigInt): Contract__campaignListResult {
    let result = super.call(
      "campaignList",
      "campaignList(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__campaignListResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_campaignList(
    param0: BigInt
  ): ethereum.CallResult<Contract__campaignListResult> {
    let result = super.tryCall(
      "campaignList",
      "campaignList(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__campaignListResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  computeNewReward(
    stakingAmount: BigInt,
    phnxReserve: BigInt,
    k: BigInt,
    amount: BigInt,
    stakeTimeSec: BigInt
  ): BigInt {
    let result = super.call(
      "computeNewReward",
      "computeNewReward(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingAmount),
        ethereum.Value.fromUnsignedBigInt(phnxReserve),
        ethereum.Value.fromUnsignedBigInt(k),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(stakeTimeSec)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeNewReward(
    stakingAmount: BigInt,
    phnxReserve: BigInt,
    k: BigInt,
    amount: BigInt,
    stakeTimeSec: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeNewReward",
      "computeNewReward(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingAmount),
        ethereum.Value.fromUnsignedBigInt(phnxReserve),
        ethereum.Value.fromUnsignedBigInt(k),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(stakeTimeSec)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardToken(): Address {
    let result = super.call("getRewardToken", "getRewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_getRewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRewardToken",
      "getRewardToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStakingToken(): Address {
    let result = super.call(
      "getStakingToken",
      "getStakingToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getStakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStakingToken",
      "getStakingToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totaldistributionToken(): BigInt {
    let result = super.call(
      "totaldistributionToken",
      "totaldistributionToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totaldistributionToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totaldistributionToken",
      "totaldistributionToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedFor(user: Address): BigInt {
    let result = super.call(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_totalStakedFor(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakedFor",
      "totalStakedFor(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddCampaignCall extends ethereum.Call {
  get inputs(): AddCampaignCall__Inputs {
    return new AddCampaignCall__Inputs(this);
  }

  get outputs(): AddCampaignCall__Outputs {
    return new AddCampaignCall__Outputs(this);
  }
}

export class AddCampaignCall__Inputs {
  _call: AddCampaignCall;

  constructor(call: AddCampaignCall) {
    this._call = call;
  }

  get durationInDays(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddCampaignCall__Outputs {
  _call: AddCampaignCall;

  constructor(call: AddCampaignCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get distributionToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class EndCampaignCall extends ethereum.Call {
  get inputs(): EndCampaignCall__Inputs {
    return new EndCampaignCall__Inputs(this);
  }

  get outputs(): EndCampaignCall__Outputs {
    return new EndCampaignCall__Outputs(this);
  }
}

export class EndCampaignCall__Inputs {
  _call: EndCampaignCall;

  constructor(call: EndCampaignCall) {
    this._call = call;
  }
}

export class EndCampaignCall__Outputs {
  _call: EndCampaignCall;

  constructor(call: EndCampaignCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueRewardFundsCall extends ethereum.Call {
  get inputs(): RescueRewardFundsCall__Inputs {
    return new RescueRewardFundsCall__Inputs(this);
  }

  get outputs(): RescueRewardFundsCall__Outputs {
    return new RescueRewardFundsCall__Outputs(this);
  }
}

export class RescueRewardFundsCall__Inputs {
  _call: RescueRewardFundsCall;

  constructor(call: RescueRewardFundsCall) {
    this._call = call;
  }
}

export class RescueRewardFundsCall__Outputs {
  _call: RescueRewardFundsCall;

  constructor(call: RescueRewardFundsCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForCall extends ethereum.Call {
  get inputs(): StakeForCall__Inputs {
    return new StakeForCall__Inputs(this);
  }

  get outputs(): StakeForCall__Outputs {
    return new StakeForCall__Outputs(this);
  }
}

export class StakeForCall__Inputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeForCall__Outputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeQueryCall extends ethereum.Call {
  get inputs(): UnstakeQueryCall__Inputs {
    return new UnstakeQueryCall__Inputs(this);
  }

  get outputs(): UnstakeQueryCall__Outputs {
    return new UnstakeQueryCall__Outputs(this);
  }
}

export class UnstakeQueryCall__Inputs {
  _call: UnstakeQueryCall;

  constructor(call: UnstakeQueryCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeQueryCall__Outputs {
  _call: UnstakeQueryCall;

  constructor(call: UnstakeQueryCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
